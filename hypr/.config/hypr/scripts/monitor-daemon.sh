#!/bin/bash

# Daemon que monitora mudan√ßas de hardware automaticamente (sem interven√ß√£o manual)

DAEMON_NAME="hyprland-monitor-daemon"
PID_FILE="/tmp/${DAEMON_NAME}.pid"
LOG_FILE="$HOME/.local/share/hyprland/${DAEMON_NAME}.log"
DETECTION_SCRIPT="$HOME/.config/hypr/scripts/monitor-detection.sh"

# Criar diret√≥rio de logs se n√£o existir
mkdir -p "$(dirname "$LOG_FILE")"

# Fun√ß√£o de logging
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$LOG_FILE"
}

# Fun√ß√£o para verificar se o daemon j√° est√° rodando
is_running() {
    if [[ -f "$PID_FILE" ]]; then
        local pid=$(cat "$PID_FILE")
        if ps -p "$pid" > /dev/null 2>&1; then
            return 0
        else
            rm -f "$PID_FILE"
            return 1
        fi
    fi
    return 1
}

# Fun√ß√£o para parar o daemon
stop_daemon() {
    if [[ -f "$PID_FILE" ]]; then
        local pid=$(cat "$PID_FILE")
        if ps -p "$pid" > /dev/null 2>&1; then
            log "üõë Parando daemon (PID: $pid)"
            kill "$pid"
            rm -f "$PID_FILE"
            return 0
        fi
    fi
    log "‚ÑπÔ∏è  Daemon n√£o estava rodando"
    return 1
}

# Fun√ß√£o para iniciar o daemon em background
start_daemon() {
    if is_running; then
        log "‚ö†Ô∏è  Daemon j√° est√° rodando"
        return 1
    fi
    
    # Iniciar em background
    {
        # Salvar PID
        echo $$ > "$PID_FILE"
        
        log "üöÄ Iniciando daemon de monitoramento autom√°tico"
        
        # Estado anterior dos monitores
        local previous_state=""
        local check_interval=2  # Verificar a cada 2 segundos
        local stabilization_delay=3  # Aguardar 3s ap√≥s mudan√ßa
        
        # Tratamento de sinais para cleanup
        trap 'log "üõë Daemon interrompido"; rm -f "$PID_FILE"; exit 0' SIGTERM SIGINT
        
        while true; do
            # Verificar se Hyprland ainda est√° rodando
            if ! pgrep -x "Hyprland" >/dev/null; then
                log "‚ùå Hyprland n√£o est√° rodando. Parando daemon."
                break
            fi
            
            # Verificar estado atual dos monitores
            local current_state=$(hyprctl monitors -j 2>/dev/null | jq -r '.[].name' | sort | tr '\n' ',')
            
            # Se houve mudan√ßa, executar reconfigura√ß√£o
            if [[ "$current_state" != "$previous_state" ]] && [[ -n "$current_state" ]]; then
                log "üì° Mudan√ßa detectada: '$previous_state' ‚Üí '$current_state'"
                
                # Aguardar hardware estabilizar
                sleep "$stabilization_delay"
                
                # Executar script de detec√ß√£o autom√°tica
                if [[ -x "$DETECTION_SCRIPT" ]]; then
                    log "üîÑ Executando reconfigura√ß√£o autom√°tica..."
                    "$DETECTION_SCRIPT" >> "$LOG_FILE" 2>&1
                    log "‚úÖ Reconfigura√ß√£o conclu√≠da"
                else
                    log "‚ùå Script de detec√ß√£o n√£o encontrado: $DETECTION_SCRIPT"
                fi
                
                previous_state="$current_state"
            fi
            
            sleep "$check_interval"
        done
        
        # Cleanup ao sair
        rm -f "$PID_FILE"
        log "üèÅ Daemon finalizado"
        
    } &
    
    # Aguardar um momento para verificar se iniciou corretamente
    sleep 1
    if is_running; then
        log "‚úÖ Daemon iniciado em background"
        return 0
    else
        log "‚ùå Falha ao iniciar daemon"
        return 1
    fi
}

# Fun√ß√£o para mostrar status
show_status() {
    if is_running; then
        local pid=$(cat "$PID_FILE")
        echo "‚úÖ Daemon rodando (PID: $pid)"
        echo "üìÑ Log: $LOG_FILE"
        
        # Mostrar √∫ltimas 5 linhas do log
        if [[ -f "$LOG_FILE" ]]; then
            echo ""
            echo "üìã √öltimas atividades:"
            tail -5 "$LOG_FILE"
        fi
    else
        echo "‚ùå Daemon n√£o est√° rodando"
    fi
}

# Processamento de comandos
case "$1" in
    "start")
        start_daemon
        ;;
    "stop")
        stop_daemon
        ;;
    "restart")
        stop_daemon
        sleep 1
        start_daemon
        ;;
    "status") 
        show_status
        ;;
    "")
        # Comportamento padr√£o: iniciar se n√£o estiver rodando
        if ! is_running; then
            start_daemon
        fi
        ;;
    *)
        echo "üîß Uso: $0 {start|stop|restart|status}"
        echo ""
        echo "O daemon monitora automaticamente mudan√ßas de hardware"
        echo "e executa reconfigura√ß√£o sem interven√ß√£o manual."
        exit 1
        ;;
esac
